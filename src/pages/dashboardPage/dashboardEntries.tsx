import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { useEffect, useRef, useState } from "react";
import ArticleModal from "./component/articleModal";

import { EditButton } from "./component/editButton";
import { DeleteButton } from "./component/deleteButton";
import { SeeRowButton } from "./component/seeRowButton";
import ArticleService from "@/services/database/articleService";
import IArticle from "../../../models/article";


const dummyData = [
  {
    id: 0,
    title: "Hola Edgar",
    description: "soy un texto de prueba",
    createdAt: "2021-08-01",
  },
  {
    id: 1,
    title: "Ke pedo",
    description: "soy un texto de prueba dos",
    createdAt: "2021-08-01",
  },
  {
    id: 2,
    title: "SS",
    description: "soy un texto de prueba 3s",
    createdAt: "2021-08-01",
  },
];

export default function DasboardEntries() {
  const router = useRouter();
  const [showArticleModal, setShowArticleModal] = useState<boolean>(false);
  const [editArticleModal, setEditArticleModal] = useState<boolean>(false);
  const [isLoading,setIsLoading] = useState<boolean>(false);
  //array of articles
  const [articles, setArticles] = useState<IArticle[]>([]);
  const dataFetchedRef = useRef(false);
  
  //article to edit
  const [article, setArticle] = useState<IArticle>({
    id: -1,
    title: "",
    description: "",
    createdAt: "",
  });

  const onOpenArticleModal = (id: any) => {
    setEditArticleModal(true);
    setArticle(articles[articles.findIndex((art) => art.id === id)]);
    setShowArticleModal(true);
  };

  const onCloseArticleModal = () => {
    setShowArticleModal(false);
  };

  const fetchArticles = () =>{
    ArticleService.fetchAll().then(()=>{
      setArticles([...ArticleService.articleList]);
      setIsLoading(false);
    });
    
  }

  useEffect(()=>{
    if (dataFetchedRef.current) return;
    setIsLoading(true);
    dataFetchedRef.current = true;
    fetchArticles();
    // console.log([...ArticleService.articleList]);
  },[])

  return (
    <>
      <Head>
        <title>Retro Wiki</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/retrowiki.ico" />
      </Head>
      <div className="flex bg-gray-800">
        {showArticleModal && (
          <ArticleModal
            onClose={onCloseArticleModal}
            article={
              editArticleModal
                ? article
                : {
                    id: articles.length+1,
                    title: "",
                    description: "",
                    createdAt: "",
                  }
            }
            setNewArticle={
              editArticleModal
                ? (article) => {
                    ArticleService.updateArticle(article);
                    setArticles(
                      articles.map((art) =>
                        art.id === article.id ? article : art
                      )
                    );
                  }
                : (article) => {
                    ArticleService.postArticle(article);
                    setArticles([...articles, article]);
                  }
            }
          />
        )}
        {/* SideBar */}
        <div className="flex flex-col h-screen p-3 bg-gray-900 shadow w-60">
          <div className="space-y-3 text-white">
            <div className="flex items-center">
              <h2 className="text-xl font-bold">Dashboard</h2>
            </div>
            <div className="flex">
              <ul className="pt-2 pb-4 space-y-1 text-sm">
                <li className="rounded-sm">
                  <Link
                    href="/dashboardPage"
                    className="flex items-center p-2 space-x-3 rounded-md"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="w-6 h-6"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                      strokeWidth={2}
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"
                      />
                    </svg>
                    <span>Home</span>
                  </Link>
                </li>
                <li className="rounded-sm">
                  <a
                    href="#"
                    className="flex items-center p-2 space-x-3 rounded-md"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="w-6 h-6"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                      strokeWidth={2}
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"
                      />
                    </svg>
                    <span>Entradas</span>
                  </a>
                </li>
                <li className="rounded-sm">
                  <Link
                    href="/dashboardPage"
                    className="flex items-center p-2 space-x-3 rounded-md"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="w-6 h-6"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                      strokeWidth={2}
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"
                      />
                    </svg>
                    <span>Videojuegos</span>
                  </Link>
                </li>
                <li className="rounded-sm">
                  <Link
                    href="/dashboardPage"
                    className="flex items-center p-2 space-x-3 rounded-md"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="w-6 h-6"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                      strokeWidth={2}
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
                      />
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                      />
                    </svg>
                    <span>Ajustes</span>
                  </Link>
                </li>
                <li className="rounded-sm">
                    <Link
                    href='/landingPage'
                      className="flex items-center p-2 space-x-3 rounded-md"
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="w-6 h-6"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                        strokeWidth={2}
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"
                        />
                      </svg>
                      <span>Cerrar Sesi√≥n</span>
                    </Link>
                </li>
              </ul>
            </div>
          </div>
        </div>
        {/* Entries Panel*/}
        <div className="container max-w-7xl mx-auto mt-8 ">
          <div className="mb-4 flex justify-between">
            <h1 className="font-serif text-3xl font-bold underline text-white decoration-gray-400 pl-4">
              Articulos
            </h1>
            <div className="flex justify-end pr-4">
              <button
                className="px-4 py-2 rounded-md bg-blue-800 text-sky-100 hover:bg-sky-600"
                onClick={() => {
                  setArticle({
                    id: -1,
                    title: "",
                    description: "",
                    createdAt: "",
                  });
                  setEditArticleModal(false);
                  setShowArticleModal(true);
                }}
              >
                Nueva Entrada
              </button>
            </div>
          </div>
          <div className=" flex flex-col">
              {isLoading && 
                <div className="m-auto pt-8 text-center text-white text-4xl">
                  Cargando . . .
                </div>}
                    
            <div className="overflow-x-auto sm:-mx-6 sm:px-6 lg:-mx-8 lg:px-8">
              <div className="inline-block min-w-full overflow-hidden align-middle border-b border-gray-200 shadow sm:rounded-lg">
                <table className="min-w-full">
                  <thead>
                    {/* Table Header */}
                    <tr>
                      <th className="px-6 py-3 text-xs font-medium leading-4 tracking-wider text-left text-gray-500 uppercase border-b border-gray-200 bg-gray-50">
                        ID
                      </th>
                      <th className="px-6 py-3 text-xs font-medium leading-4 tracking-wider text-left text-gray-500 uppercase border-b border-gray-200 bg-gray-50">
                        Titulo
                      </th>
                      <th className="px-6 py-3 text-xs font-medium leading-4 tracking-wider text-left text-gray-500 uppercase border-b border-gray-200 bg-gray-50">
                        Descripcion
                      </th>
                      <th className="px-6 py-3 text-xs font-medium leading-4 tracking-wider text-left text-gray-500 uppercase border-b border-gray-200 bg-gray-50">
                        Fecha de creacion
                      </th>
                      <th className="px-6 py-3 text-xs font-medium leading-4 tracking-wider text-left text-gray-500 uppercase border-b border-gray-200 bg-gray-50">
                        Acciones
                      </th>
                    </tr>
                  </thead>
                  {/* Table body */}
                  <tbody className="bg-white">
                    {
                      // Table row
                      articles.map((article) => (
                        <tr
                          className="border-b border-gray-200"
                          key={article.id}
                        >
                          <td className="px-6 py-4 whitespace-no-wrap ">
                            <span className="flex items-center">
                              {article.id}
                            </span>
                          </td>

                          <td className="px-6 py-4 whitespace-no-wrap ">
                            <div className="text-sm leading-5 text-gray-900">
                              {article.title}
                            </div>
                          </td>

                          <td className="px-6 py-4 whitespace-no-wrap ">
                            <p>{article.description}</p>
                          </td>

                          <td className="px-6 py-4 text-sm leading-5 text-gray-500 whitespace-no-wrap ">
                            <span>{article.createdAt}</span>
                          </td>
                          {/* Action buttons */}
                          <td className="flex py-4 gap-2 ml-3 text-sm  ">
                            {/* Edit button */}
                            <button
                              onClick={() => {
                                onOpenArticleModal(article.id);
                              }}
                            >
                              <EditButton />
                            </button>
                            {/* Delete button */}
                            <button
                              onClick={() => {
                                console.log('clicked on delete')
                                ArticleService.deleteArticle(article);
                                setArticles(articles.filter((art) => art.id !== article.id));
                              }}
                            >
                              <DeleteButton />
                            </button>
                            {/* See details button */}
                            <SeeRowButton />
                          </td>
                        </tr>
                      ))
                    }
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}
